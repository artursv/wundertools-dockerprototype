#!/usr/bin/env bash
# RUN docker-composer
#
# This is a wrapper around docker composer so that we can force a project name
# as a base for all container names, and so that we can allow switching of yml
# configurations files.
#
# Docker composer is run in a container, as suggested on the docker-compose
# site, and this is technically a script copy of their run.sh
# There are many things that I don't like about the script, so I will be
# trying to scale it down in the future.
#
# @NOTE that this is now the default command, so in some cases it will receive
#   bad arguments which may have been intened for a different container.
#
#   $/> wundertools up
#   $/> wundertools compose restart www
#
# Compose yml file is looked for here (PATH_APP is usually ./app or ../)
#   PATH_APP/docker-compose.yml
#   PATH_APP/compose-$PROJECT.yml
#   PATH_WUNDERTOOLS/docker-compose.yml
#   PATH_WUNDERTOOLS/compose-$PROJECT.yml
#   PATH_WUNDERTOOLS/compose-default.yml
#

#
# Run docker-compose in a container
#
# This script will attempt to mirror the host paths by using volumes for the
# following paths:
#   * ${PATH_TARGET}
#   * $(dirname $COMPOSE_FILE) if it's set
#   * $HOME if it's set
#
# You can add additional volumes (or any docker run options) using
# the $COMPOSE_OPTIONS environment variable.
#


set -e

DOCKER_COMPOSE_VERSION="1.6.2"
DOCKER_COMPOSE_IMAGE="docker/compose:$DOCKER_COMPOSE_VERSION"

PATH_TARGET="${PATH_EXECUTION}"
CONTAINER_PATH_TARGET="/app/target"

# Setup options for connecting to docker host
if [ -z "$DOCKER_HOST" ]; then
    DOCKER_HOST="/var/run/docker.sock"
fi
if [ -S "$DOCKER_HOST" ]; then
    DOCKER_ADDR="-v \"$DOCKER_HOST:$DOCKER_HOST\" -e DOCKER_HOST"
else
    DOCKER_ADDR="-e DOCKER_HOST -e DOCKER_TLS_VERIFY -e DOCKER_CERT_PATH"
fi

# Setup volume mounts for compose config and context
if [ "${PATH_TARGET}" != '/' ]; then
    VOLUMES="-v ${PATH_TARGET}:${CONTAINER_PATH_TARGET}"
fi
if [ -n "$COMPOSE_FILE" ]; then
    compose_dir=$(dirname $COMPOSE_FILE)
fi
# TODO: also check --file argument
if [ -n "$compose_dir" ]; then
    VOLUMES="$VOLUMES -v $compose_dir:$compose_dir"
fi
if [ -n "$HOME" ]; then
    VOLUMES="$VOLUMES -v $HOME:$HOME -v $HOME:/root" # mount $HOME in /root to share docker.config
fi

# Only allocate tty if we detect one
if [ -t 1 ]; then
    DOCKER_RUN_OPTIONS="-t"
fi
if [ -t 0 ]; then
    DOCKER_RUN_OPTIONS="$DOCKER_RUN_OPTIONS -i"
fi

docker run --rm $DOCKER_RUN_OPTIONS $DOCKER_ADDR $COMPOSE_OPTIONS $VOLUMES -w "${CONTAINER_PATH_TARGET}" $DOCKER_COMPOSE_IMAGE --file ${COMPOSE_FILE} --project-name ${COMPOSE_PROJECT_NAME} $@
